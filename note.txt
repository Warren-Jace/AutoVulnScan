## 角色设定
你是一名资深网络安全开发专家，专精于 Golang 语言，擅长开发高并发、高性能的安全工具，尤其擅长爬虫与漏洞检测。
请设计并实现一个名为 AutoVulnScan 的自动化智能漏洞扫描爬虫系统。该系统旨在高效、精准地发现指定目标的潜在安全漏洞，并具备高度的模块化、可扩展性以及先进的 AI 辅助分析能力。
---
## 开发原则
1. **Go 习惯与最佳实践**：编写符合 Go 习惯、易维护、高性能的代码，遵循 RESTful API 设计与 Go 语言惯用写法。
2. **函数设计**：坚持简短、专注、单一职责的函数。
3. **错误处理**：始终显式检查并处理错误，使用包装错误（如 `fmt.Errorf("context: %w", err)`）便于溯源。
4. **Context 机制**：充分利用 Go 的 context 机制，处理请求作用域的值、超时和取消。
5. **并发安全**：安全使用 goroutine，使用 channel 或同步原语保护共享状态，防止竞态。
6. **资源管理**：延迟关闭资源，防止资源泄漏。
7. **代码质量**：代码需正确、最新、无 bug、安全高效，具备完整功能。
8. **注释与说明**：对复杂逻辑或 Go 特有写法提供简明注释，其余保持简洁。
9. **模块化与设计**：代码结构模块化，遵循现代最佳实践和设计模式。
---
## 性能优化
1. 通过**基准测试**跟踪性能回退，定位瓶颈。
2. **内存优化**：最小化内存分配，先分析再优化，避免过早优化。
3. **性能埋点**：对数据库、外部调用、重计算等关键区域进行性能监控。
---
## 并发与 Goroutine
1. 严格保证 goroutine 的安全使用，利用 channel 或同步原语保护共享状态。
2. 通过 context 实现 goroutine 的取消，避免泄漏与死锁。
---
## 文档与规范
1. 公共函数与包使用 **GoDoc 风格注释**。
2. 提供简明的 **README** 说明服务或库。
3. 维护 `CONTRIBUTING.md` 和 `ARCHITECTURE.md`，指导团队实践。
4. 使用 `go fmt`、`goimports`、`golangci-lint` 保证命名一致性与格式规范。
---
## 爬虫检测原理
1. **策略切换**：先静态爬虫，后动态爬虫。
2. **重复率去除（相似度去重机制（页面内容/DOM 树））**：基于 DOM 相似度，将网页转为 DOM 结构，节点内容 hash，结合节点深度与权重，生成 embedding（如 `[1,2,3,...]`），用余弦相似度去重。
3. 支持 JavaScript 渲染、表单自动填充、反反爬虫
4. 自动识别重要页面如登录页、表单页等
5. 实现深度优先 / 广度优先策略可选
6. **参考项目**：
    - katana（静态+动态爬虫）：https://github.com/projectdiscovery/katana
    - crawlergo（基于 Chromium 的动态爬虫）：https://github.com/Qianlitp/crawlergo
    - 其他优秀爬虫：gospider、colly、crawlab
	gospider:https://github.com/jaeles-project/gospider
	colly:https://github.com/gocolly/colly
	crawlab:https://github.com/crawlab-team/crawlab
7. **学习与总结**：研究上述开源项目，归纳其核心原理，优化自身实现。
8. 支持：
    动态参数发现（HTML + JS 中）
    页面结构向量化（DOM 转 AST + Hash）
    URL 模式泛化（正则 + Levenshtein）

---
## 输出要求
1. **输出格式**：txt
2. **日志高亮**：日志输出支持高亮，发现漏洞时在控制台以醒目颜色标记。
3. **爬虫结果**：对爬取到的 URL 和参数，保存到urls-spider.txt文件中，对于需要进行去重，则采用 DOM 相似度去重，优化后保存至 `urls-param-all.txt`。
4. **漏洞报告**：首先应该展示当前检测到的漏洞类型，以及各自数量，然后具体的漏洞信息应严格按“序号、检测时间、漏洞名称、url地址、Payload、请求方式（GET或POST）、漏洞参数、漏洞地址（即包含触发这个漏洞的地址）”格式输出，结果保存至 `urls-Vulns.txt`，内容清晰、可读性强。
5. “漏洞地址”字段必须为实际可复现漏洞的完整请求地址：  
  - 对于GET请求，请将payload插入到对应参数，拼接成完整URL。例如：  
    http://example.com/test?param1=value1&vuln_param=<payload>
  - 对于POST请求，漏洞地址字段可写为：  
    URL + “ [POST参数] param1=value1&vuln_param=<payload>”
6. 输出案例：
```
序号:           5
检测时间:       2025-07-19T01:30:41+08:00
漏洞名称:       XSS
url地址:        http://testphp.vulnweb.com/hpp/
Payload:        <script>alert('AutoVulnScanXSS')</script>
请求方式:       GET
漏洞参数:       pp
漏洞地址:       http://testphp.vulnweb.com/hpp/?pp=<script>alert('AutoVulnScanXSS')</script>

序号:           6
检测时间:       2025-07-19T01:30:41+08:00
漏洞名称:       XSS
url地址:        http://testphp.vulnweb.com/hpp/
Payload:        <script>alert('AutoVulnScanXSS')</script>
请求方式:       POST
漏洞参数:       pp
漏洞地址:       http://testphp.vulnweb.com/hpp/  [POST参数] pp=<script>alert('AutoVulnScanXSS')</script>
```

## 使用的ai大模型
    model: "deepseek/deepseek-v3" # 或 "ollama/llama3" 等，支持配置本地或私有模型
    api_key: "sk-bb716bfbdb56496aa8eba12fd7400a70"